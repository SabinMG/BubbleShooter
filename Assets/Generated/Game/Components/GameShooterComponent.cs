//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public ShooterComponent shooter { get { return (ShooterComponent)GetComponent(GameComponentsLookup.Shooter); } }
    public bool hasShooter { get { return HasComponent(GameComponentsLookup.Shooter); } }

    public void AddShooter(bool newRechedTarget) {
        var index = GameComponentsLookup.Shooter;
        var component = (ShooterComponent)CreateComponent(index, typeof(ShooterComponent));
        component.rechedTarget = newRechedTarget;
        AddComponent(index, component);
    }

    public void ReplaceShooter(bool newRechedTarget) {
        var index = GameComponentsLookup.Shooter;
        var component = (ShooterComponent)CreateComponent(index, typeof(ShooterComponent));
        component.rechedTarget = newRechedTarget;
        ReplaceComponent(index, component);
    }

    public void RemoveShooter() {
        RemoveComponent(GameComponentsLookup.Shooter);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherShooter;

    public static Entitas.IMatcher<GameEntity> Shooter {
        get {
            if (_matcherShooter == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.Shooter);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherShooter = matcher;
            }

            return _matcherShooter;
        }
    }
}
